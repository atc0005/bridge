# Copyright 2020 Adam Chalkley
#
# https:#github.com/atc0005/bridge
#
# Licensed under the MIT License. See LICENSE file in the project root for
# full license information.

# https://github.com/taskctl/taskctl
# https://github.com/taskctl/taskctl/blob/master/docs/example.yaml

pipelines:
  pipeline1:
    - name: Initialize build process
      task: init

    - name: Install linting tools
      task: lint-install
      depends_on: init
      allow_failure: false

    # Run in parallel with build task
    - name: Lint codebase
      task: lint
      depends_on: ["init", "lint-install"]
      allow_failure: false

    # Run in parallel with lint task
    - name: Build codebase
      task: build
      depends_on: init

tasks:
  lint-install:
    context: lint-install
    allow_failure: false

    # Change out of current working directory so that we don't unintentionally
    # alter this project's go.mod file when installing linting tools with
    # go modules support enabled.
    dir: /tmp
    env:
      # Explicitly enabling this to resolve Go v1.12.x build issues
      GO111MODULE: "on"

      # TODO: Confirm that this appends to PATH instead of overwriting it
      PATH: "${PATH}:$(go env GOPATH)/bin"
    command:
      - go get golang.org/x/lint/golint
      # TODO: Use specific release version for golangci-lint
      - go get github.com/golangci/golangci-lint/cmd/golangci-lint
      - go get honnef.co/go/tools/cmd/staticcheck

  lint:
    allow_failure: false
    command:
      # https://stackoverflow.com/a/42510278/903870
      - diff -u <(echo -n) <(gofmt -l -e -d .)
      - go vet $(go list ./... | grep -v /vendor/)
      - golint -set_exit_status $(go list ./... | grep -v /vendor/)
      - >-
        golangci-lint run
          -E goimports
          -E gosec
          -E stylecheck
          -E goconst
          -E depguard
          -E prealloc
          -E misspell
          -E maligned
          -E dupl
          -E unconvert
          -E golint
          -E gocritic

  checksums:
    command:
      - echo "Create checksums for binaries here"

  build:
    command:
      - mkdir -p "${OUTPUT_DIR_BASE}/${APP_NAME}"
      - >-
        GOOS=${GOOS}
        GOARCH=${GOARCH}
        go build -o
        ${OUTPUT_DIR}/${APP_NAME}/${APP_NAME}-${VERSION}-${GOOS}-${ARCH}${EXT}
        ./cmd/${APP_NAME}
    env:
      # This should be set in the global/local context?
      #VERSION: "PLACEHOLDER"
      GOFLAGS: -a -ldflags="-s -w -X main.version=${PLACEHOLDER}"
      OUTPUT_DIR_BASE: "release_assets"
    variations:
      - GOOS: linux
        GOARCH: amd64
        APP_NAME: prune
      - GOOS: linux
        GOARCH: 386
        APP_NAME: prune
      - GOOS: linux
        GOARCH: amd64
        APP_NAME: report
      - GOOS: linux
        GOARCH: 386
        APP_NAME: report

      - GOOS: windows
        GOARCH: amd64
        APP_NAME: prune
      - GOOS: windows
        GOARCH: 386
        APP_NAME: prune
      - GOOS: windows
        GOARCH: amd64
        APP_NAME: report
      - GOOS: windows
        GOARCH: 386
        APP_NAME: report

contexts:
  local: # will be created automatically if not set
    type: local
    # executable:
    #   bin: /bin/sh
    #   args:
    #     - -c
    env:
      # TODO: How can we call out to git to generate this dynamically?
      # git describe --always --long --dirty
      VERSION: "$(git describe --always --long --dirty)"

debug: true # debug enabled by default. To disable run with "--debug=false"
