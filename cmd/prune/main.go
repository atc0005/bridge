// Copyright 2020 Adam Chalkley
//
// https://github.com/atc0005/bridge
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"os"
	"strconv"
	"strings"
	"text/tabwriter"

	"github.com/atc0005/bridge/checksums"
	"github.com/atc0005/bridge/config"
	"github.com/atc0005/bridge/paths"
)

// InputCSVRow represents a row from an input CSV file. This row is expected
// to contain data originally generated by the `report` subcommand and a
// user-provided flag indicating whether one or more files from a duplicate
// file set are to be removed.
type InputCSVRow struct {

	// ParentDirectory represents the directory containing a file from a
	// duplicate file sets
	ParentDirectory string

	// Filename is the name of a file from a duplicate file set
	Filename string

	// SizeHR is the size of a file from a duplicate file set in
	// human-readable text format (e.g., 1 GB, 500 MB)
	SizeHR string

	// SizeInBytes is the size of a file from a duplicate file set in bytes
	SizeInBytes int64

	// Checksum is the file hash for a file from a duplicate file set
	Checksum checksums.SHA256Checksum

	// RemoveFile is a flag indicating whether a file from a duplicate file
	// set is to be removed
	RemoveFile bool
}

func printCSVRows(rows []InputCSVRow) {

	w := &tabwriter.Writer{}
	//w := tabwriter.NewWriter(os.Stdout, 0, 0, 1, '.', tabwriter.AlignRight|tabwriter.Debug)

	// Format in tab-separated columns
	//w.Init(os.Stdout, 16, 8, 8, '\t', 0)
	w.Init(os.Stdout, 8, 8, 4, '\t', 0)

	// NOTE: Skip outputing size in bytes since this is meant to be reviewed
	// by a human and not programatically acted upon

	// Header row in output
	fmt.Fprintln(w,
		"Directory\tFile\tSize\tChecksum\tRemove File")

	for _, row := range rows {

		fmt.Fprintf(w,
			"%v\t%v\t%v\t%v\t%v\n",
			row.ParentDirectory,
			row.Filename,
			row.SizeHR,
			row.Checksum,
			row.RemoveFile,
		)

	}

	fmt.Fprintln(w)
	w.Flush()
}

func main() {

	var appConfig *config.Config
	var err error

	if appConfig, err = config.NewConfig(); err != nil {
		panic(err)
	}

	log.Printf("Configuration: %+v\n", appConfig)

	// Values we can work with:
	//
	// config.IgnoreErrors
	// config.DryRun
	// config.BlankLineBetweenSets
	// config.InputCSVFile
	// config.ConsoleReport
	// config.BackupDirectory
	// config.PruneFiles
	// config.SkipFirstRow

	// -------------------------------------------------------------------- //

	/*

		STEPS

		Parse config options
		Open CSV file
			? Buffered reader?
		Create CSV Reader object
		Apply CSV parsing requirements
			- Require specific number of fields
			- Skip blank lines
		Loop over rows
		Validate row fields
			- Field content?
				- e.g., checksum field has a length expected of current
				  hash algorithm
		Verify files exist
		Verify checksum for each file removal candidate
		Backup file removal candidate (if option is set)

	*/

	if !paths.PathExists(appConfig.InputCSVFile) {
		log.Fatal("specified CSV input file does not exist")
	}

	file, err := os.Open(appConfig.InputCSVFile)
	if err != nil {
		log.Fatal(err)
	}
	// NOTE: We're not manipulating contents for this file, so relying solely
	// on a defer statement to close the file should be sufficient?
	defer file.Close()

	csvReader := csv.NewReader(file)

	// Require that the number of fields found matches what we expect to find
	csvReader.FieldsPerRecord = config.InputCSVFieldCount

	// TODO: Even with this set, we should probably still trim whitespace
	// ourselves so that we can be assured that leading AND trailing
	// whitespace has been removed
	csvReader.TrimLeadingSpace = true

	var csvRows []InputCSVRow
	var rowCounter int = 0
	for {

		// Go ahead and bump the counter to reflect that humans start counting
		// CSV rows from 1 and not 0
		rowCounter++

		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatal(err)
		}

		// If we are currently evaluating the very first line of the CSV file
		// and the user did not override the default option of skipping the
		// first row (due to it usually being the header row)
		if rowCounter == 1 {
			if !appConfig.UseFirstRow {
				// DEBUG
				log.Println("Skipping first row in input file to avoid processing column headers")
				continue
			}
			log.Println("Attempting to parse row 1 from input CSV file as requested")
		}

		// TODO: Implement better handling here
		for index, field := range record {
			if strings.TrimSpace(field) == "" {
				// WARNING?
				// NOTE: Increment index to provide human-readable field
				// number and not zero-based field numbers
				log.Printf("Row %d, field %d is empty.", rowCounter, index+1)
				if appConfig.IgnoreErrors {
					log.Println("IgnoringErrors set, ignoring empty field and continuing with the next one.")
					continue
				}
				log.Fatal("IgnoringErrors NOT set. Exiting.")
			}
		}

		sizeInBytes, err := strconv.ParseInt(record[3], 10, 64)
		if err != nil {
			log.Printf("DEBUG | CSV row %d, field 4: %q\n", rowCounter, record[3])
			log.Println("failed to convert CSV sizeInBytes field", err)
			if appConfig.IgnoreErrors {
				log.Println("IgnoringErrors set, ignoring input row and continuing with the next one.")
				continue
			}
			log.Fatal("IgnoringErrors NOT set. Exiting.")
		}

		removeFile, err := strconv.ParseBool(record[5])
		if err != nil {
			log.Printf("DEBUG | CSV row %d, field 6: %q\n", rowCounter, record[5])
			log.Println("failed to convert CSV remove_file field:", err)
			if appConfig.IgnoreErrors {
				log.Println("IgnoringErrors set, ignoring input row and continuing with the next one.")
				continue
			}
			log.Fatal("IgnoringErrors NOT set. Exiting.")
		}

		// convert a CSV row into an object representing the various named
		// fields found in that row
		row := InputCSVRow{
			ParentDirectory: record[0],
			Filename:        record[1],
			SizeHR:          record[2],
			SizeInBytes:     sizeInBytes,
			Checksum:        checksums.SHA256Checksum(record[4]),
			RemoveFile:      removeFile,
		}

		//fmt.Println(record)
		// fmt.Println(record[0])
		// fmt.Println(record[1])
		// fmt.Println(record[2])
		// fmt.Println(record[3])
		// fmt.Println(record[4])
		// fmt.Println(record[5])

		//fmt.Println(row)
		// fmt.Println(row.ParentDirectory)
		// fmt.Println(row.Filename)
		// fmt.Println(row.SizeHR)
		// fmt.Println(row.SizeInBytes)
		// fmt.Println(row.Checksum)
		// fmt.Println(row.RemoveFile)

		csvRows = append(csvRows, row)

		//printCSVRow(row)

	}

	printCSVRows(csvRows)

}
